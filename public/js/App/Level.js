import { ItemList } from '../data/ItemList';
import { CharList } from '../data/CharList';
import { EventList } from '../data/EventList';
import Cell from './Cell';
class Level {
    constructor(levelProps) {
        const { name, gridLayers, vp, spriteSheet } = levelProps;
        this.name = name;
        this.vp = vp;
        this.spriteSheet = spriteSheet;
        this.gridLayers = gridLayers;
    }
    draw(context) {
        const [charCol, charRow, charDirection] = this.getCurrentPosition('@');
        const rowRange = [
            charRow - this.vp.rowPad,
            charRow + this.vp.rowPad
        ];
        const colRange = [
            charCol - this.vp.colPad,
            charCol + this.vp.colPad
        ];
        this.gridLayers.tiles
            .forEach((row, rowIndex) => {
            const y = (rowIndex - rowRange[0]) * this.vp.blockSize;
            row.forEach((tile, colIndex) => {
                const x = (colIndex - colRange[0]) * this.vp.blockSize;
                const newCell = new Cell({
                    vp: this.vp,
                    spriteSheet: this.spriteSheet,
                    position: [x, y],
                    bgTileKey: tile,
                    itemKey: this.gridLayers.items[rowIndex][colIndex],
                    eventKey: this.gridLayers.events[rowIndex][colIndex],
                    char: this.gridLayers.chars[rowIndex][colIndex],
                });
                newCell.draw(context);
            });
        });
    }
    getCurrentPosition(character) {
        let charCol = -1;
        let charDirection = 's';
        const charRow = this.gridLayers.chars.findIndex((row, rowIndex) => {
            const colIndex = row.findIndex((c) => {
                return c[0] === character;
            });
            if (colIndex !== -1) {
                charCol = colIndex;
                charDirection = this.gridLayers.chars[rowIndex][colIndex][1];
                return true;
            }
        });
        return [charCol, charRow, charDirection];
    }
    getTargetPosition(direction, characterPosition) {
        const [moveX, moveY] = direction;
        const [charCol, charRow] = characterPosition;
        let targetRow = moveY !== 0 ? charRow + moveY : charRow;
        let targetCol = moveX !== 0 ? charCol + moveX : charCol;
        return [targetCol, targetRow];
    }
    moveCharacter(direction) {
        const [charCol, charRow, charDirection] = this.getCurrentPosition('@');
        const [targetCol, targetRow] = this.getTargetPosition(direction, [charCol, charRow]);
        let newDirection = charDirection;
        if (direction[0] === -1) {
            newDirection = 'w';
        }
        else if (direction[0] === 1) {
            newDirection = 'e';
        }
        else if (direction[1] === -1) {
            newDirection = 'n';
        }
        else if (direction[1] === 1) {
            newDirection = 's';
        }
        // Change direction player faces
        if (charDirection !== newDirection) {
            this.gridLayers.chars[charRow][charCol] = ['@', newDirection];
            return;
        }
        // Stay within bounds
        if (targetCol < 0 || targetCol > this.gridLayers.events[0].length - 1 || targetRow < 0 || targetRow > this.gridLayers.events.length - 1) {
            return;
        }
        // Deterine what's at the target space character wants to move
        const whatsAtRowCol = this.gridLayers.events[targetRow][targetCol];
        const whatsCharAtRowCol = this.gridLayers.chars[targetRow][targetCol][0];
        const whatsItemAtRowCol = this.gridLayers.items[targetRow][targetCol];
        const whatEventAtRowCol = this.gridLayers.events[targetRow][targetCol];
        if (whatEventAtRowCol !== ' ') {
            console.log(EventList[whatEventAtRowCol].dialog[0]);
        }
        if (whatsItemAtRowCol !== ' ') {
            console.log(ItemList[whatsItemAtRowCol].info);
        }
        if (whatsCharAtRowCol !== ' ') {
            console.log(CharList[whatsCharAtRowCol].dialog[0]);
        }
        // Move to target position if possible
        if (whatsAtRowCol !== 'X' && whatsCharAtRowCol === ' ') {
            this.gridLayers.chars[charRow][charCol] = [' ', 's'];
            this.gridLayers.chars[targetRow][targetCol] = ['@', newDirection];
            return;
        }
    }
}
export default Level;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGV2ZWwuanMiLCJzb3VyY2VSb290IjoiLi4vc3JjLyIsInNvdXJjZXMiOlsiQXBwL0xldmVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQTtBQUMzQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFDM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLG1CQUFtQixDQUFBO0FBQzdDLE9BQU8sSUFBSSxNQUFNLFFBQVEsQ0FBQTtBQVN6QixNQUFNLEtBQUs7SUFNUCxZQUFZLFVBQTBCO1FBQ2xDLE1BQU0sRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLEVBQUUsRUFBRSxXQUFXLEVBQUUsR0FBRyxVQUFVLENBQUE7UUFDeEQsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUE7UUFDaEIsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUE7UUFDWixJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQTtRQUM5QixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQTtJQUNoQyxDQUFDO0lBRUQsSUFBSSxDQUFDLE9BQWlDO1FBQ2xDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLGFBQWEsQ0FBQyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUV0RSxNQUFNLFFBQVEsR0FBRztZQUNiLE9BQU8sR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU07WUFDeEIsT0FBTyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTTtTQUMzQixDQUFBO1FBRUQsTUFBTSxRQUFRLEdBQUc7WUFDYixPQUFPLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNO1lBQ3hCLE9BQU8sR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU07U0FDM0IsQ0FBQTtRQUVELElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSzthQUNoQixPQUFPLENBQUMs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