import { ItemList } from '../data/ItemList';
import { CharList } from '../data/CharList';
import { EventList } from '../data/EventList';
import Cell from './Cell';
import SFX from './SFX';
class Level {
    constructor(levelProps) {
        const { name, gridLayers, vp, spriteSheet } = levelProps;
        this.name = name;
        this.vp = vp;
        this.spriteSheet = spriteSheet;
        this.gridLayers = gridLayers;
    }
    draw(context) {
        const [charCol, charRow, charDirection] = this.getCurrentPosition('@');
        const rowRange = [
            charRow - this.vp.rowPad,
            charRow + this.vp.rowPad
        ];
        const colRange = [
            charCol - this.vp.colPad,
            charCol + this.vp.colPad
        ];
        this.gridLayers.tiles
            .forEach((row, rowIndex) => {
            const y = (rowIndex - rowRange[0]) * this.vp.blockSize;
            row.forEach((tile, colIndex) => {
                const x = (colIndex - colRange[0]) * this.vp.blockSize;
                const newCell = new Cell({
                    vp: this.vp,
                    spriteSheet: this.spriteSheet,
                    position: [x, y],
                    bgTileKey: tile,
                    itemKey: this.gridLayers.items[rowIndex][colIndex],
                    eventKey: this.gridLayers.events[rowIndex][colIndex],
                    char: this.gridLayers.chars[rowIndex][colIndex],
                });
                newCell.draw(context);
            });
        });
    }
    getCurrentPosition(character) {
        let charCol = -1;
        let charDirection = 's';
        const charRow = this.gridLayers.chars.findIndex((row, rowIndex) => {
            const colIndex = row.findIndex((c) => {
                return c[0] === character;
            });
            if (colIndex !== -1) {
                charCol = colIndex;
                charDirection = this.gridLayers.chars[rowIndex][colIndex][1];
                return true;
            }
        });
        return [charCol, charRow, charDirection];
    }
    getTargetPosition(direction, characterPosition) {
        const [moveX, moveY] = direction;
        const [charCol, charRow] = characterPosition;
        let targetRow = moveY !== 0 ? charRow + moveY : charRow;
        let targetCol = moveX !== 0 ? charCol + moveX : charCol;
        return [targetCol, targetRow];
    }
    moveCharacter(direction) {
        const [charCol, charRow, charDirection] = this.getCurrentPosition('@');
        const [targetCol, targetRow] = this.getTargetPosition(direction, [charCol, charRow]);
        let newDirection = charDirection;
        if (direction[0] === -1) {
            newDirection = 'w';
        }
        else if (direction[0] === 1) {
            newDirection = 'e';
        }
        else if (direction[1] === -1) {
            newDirection = 'n';
        }
        else if (direction[1] === 1) {
            newDirection = 's';
        }
        // Change direction player faces
        if (charDirection !== newDirection) {
            this.gridLayers.chars[charRow][charCol] = ['@', newDirection];
            return;
        }
        // Stay within bounds
        if (targetCol < 0 || targetCol > this.gridLayers.events[0].length - 1 || targetRow < 0 || targetRow > this.gridLayers.events.length - 1) {
            return;
        }
        // Deterine what's at the target space character wants to move
        const whatsAtRowCol = this.gridLayers.events[targetRow][targetCol];
        const whatsCharAtRowCol = this.gridLayers.chars[targetRow][targetCol][0];
        const whatsItemAtRowCol = this.gridLayers.items[targetRow][targetCol];
        const whatEventAtRowCol = this.gridLayers.events[targetRow][targetCol];
        if (whatEventAtRowCol !== ' ') {
            console.log(EventList[whatEventAtRowCol].dialog[0]);
            const { sfx } = EventList[whatEventAtRowCol];
            if (sfx) {
                const sound = new SFX({ src: sfx });
                sound.play();
            }
        }
        if (whatsItemAtRowCol !== ' ') {
            console.log(ItemList[whatsItemAtRowCol].info);
        }
        if (whatsCharAtRowCol !== ' ') {
            console.log(CharList[whatsCharAtRowCol].dialog[0]);
        }
        // Move to target position if possible
        if (whatsAtRowCol !== 'X' && whatsCharAtRowCol === ' ') {
            this.gridLayers.chars[charRow][charCol] = [' ', 's'];
            this.gridLayers.chars[targetRow][targetCol] = ['@', newDirection];
            return;
        }
    }
}
export default Level;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGV2ZWwuanMiLCJzb3VyY2VSb290IjoiLi4vc3JjLyIsInNvdXJjZXMiOlsiQXBwL0xldmVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQTtBQUMzQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFDM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLG1CQUFtQixDQUFBO0FBQzdDLE9BQU8sSUFBSSxNQUFNLFFBQVEsQ0FBQTtBQUN6QixPQUFPLEdBQUcsTUFBTSxPQUFPLENBQUE7QUFTdkIsTUFBTSxLQUFLO0lBTVAsWUFBWSxVQUEwQjtRQUNsQyxNQUFNLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxFQUFFLEVBQUUsV0FBVyxFQUFFLEdBQUcsVUFBVSxDQUFBO1FBQ3hELElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFBO1FBQ2hCLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFBO1FBQ1osSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUE7UUFDOUIsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUE7SUFDaEMsQ0FBQztJQUVELElBQUksQ0FBQyxPQUFpQztRQUNsQyxNQUFNLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxhQUFhLENBQUMsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUE7UUFFdEUsTUFBTSxRQUFRLEdBQUc7WUFDYixPQUFPLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNO1lBQ3hCLE9BQU8sR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU07U0FDM0IsQ0FBQTtRQUVELE1BQU0sUUFBUSxHQUFHO1lBQ2IsT0FBTyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTTtZQUN4QixPQUFPLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNO1NBQzNCLENBQUE7UUFFRCxJQUFJLENBQUMs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