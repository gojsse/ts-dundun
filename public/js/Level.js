import Cell from './Cell';
import { TileMap } from './TileMap';
class Level {
    constructor(props) {
        // TODO
        this.items = {
            key1: false
        };
        const { grid, name, vp } = props;
        this.grid = grid;
        this.name = name;
        this.vp = vp;
    }
    draw(context) {
        const { charX, charY } = this.getCurrentPosition('P');
        this.grid
            .filter((row, rowIndex) => {
            return rowIndex >= (charY - this.vp.vPad) && rowIndex <= (charY + this.vp.vPad);
        })
            .map((row, rowIndex) => {
            const v = this.getVPad(rowIndex, charY);
            return row
                .filter((character, cellIndex) => {
                return cellIndex >= (charX - this.vp.hPad) && cellIndex <= (charX + this.vp.hPad);
            })
                .map((character, cellIndex) => {
                const h = this.getHPad(cellIndex, charX);
                const newCell = new Cell([h, v], character, this.vp);
                newCell.draw(context);
            });
        });
    }
    getCurrentPosition(character) {
        const charY = this.grid.findIndex(row => row.includes(character));
        const charX = this.grid[charY].findIndex(c => c === character);
        return { charX, charY };
    }
    getTargetPosition(direction, characterPosition) {
        const [moveX, moveY] = direction;
        const [currentX, currentY] = characterPosition;
        let targetX = currentX;
        let targetY = currentY;
        // Vertical (y)
        if (moveY !== 0) {
            targetY = currentY + moveY;
        }
        // Horizontal (x)
        if (moveX !== 0) {
            targetX = currentX + moveX;
        }
        return { targetX, targetY };
    }
    getVPad(rowIndex, charY) {
        let v = rowIndex * this.vp.blockSize;
        for (let index = 0; index < this.vp.vPad; index++) {
            if (charY === index) {
                return (rowIndex + (this.vp.vPad - index)) * this.vp.blockSize;
            }
        }
        return v;
    }
    getHPad(cellIndex, charX) {
        let h = cellIndex * this.vp.blockSize;
        for (let index = 0; index < this.vp.hPad; index++) {
            if (charX === index) {
                return (cellIndex + (this.vp.hPad - index)) * this.vp.blockSize;
            }
        }
        return h;
    }
    moveCharacter(character, direction) {
        const { charX, charY } = this.getCurrentPosition(character);
        const { targetX, targetY } = this.getTargetPosition(direction, [charX, charY]);
        // Stay within bounds of grid
        if (targetX < 0 || targetY < 0 || targetX > this.grid[0].length - 1 || targetY > this.grid.length - 1) {
            return;
        }
        const whatsThere = this.grid[targetY][targetX];
        // Move to target position
        if (whatsThere === ' ') {
            this.grid[charY][charX] = ' ';
            this.grid[targetY][targetX] = 'P';
            return;
        }
        if (whatsThere in TileMap) {
            // Pick up a key > change to pick 'something' up
            if (whatsThere === 'K') {
                this.items.key1 = true;
                this.grid[charY][charX] = ' ';
                this.grid[targetY][targetX] = 'P';
            }
            // Open door with a key
            if (whatsThere === 'D' && this.items.key1 === true) {
                this.grid[charY][charX] = ' ';
                this.grid[targetY][targetX] = 'P';
            }
            if (whatsThere === '2') {
                // this.inventory.key = true
                // this.grid[charY][charX] = ' '
                // this.grid[targetY][targetX] = 'P'
            }
        }
    }
}
export default Level;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGV2ZWwuanMiLCJzb3VyY2VSb290IjoiLi4vc3JjLyIsInNvdXJjZXMiOlsiTGV2ZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxJQUFJLE1BQU0sUUFBUSxDQUFBO0FBQ3pCLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUE7QUFFbkMsTUFBTSxLQUFLO0lBVVAsWUFBWSxLQUEyQztRQUx2RCxPQUFPO1FBQ1AsVUFBSyxHQUFHO1lBQ0osSUFBSSxFQUFFLEtBQUs7U0FDZCxDQUFBO1FBR0csTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEdBQUcsS0FBSyxDQUFBO1FBQ2hDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFBO1FBQ2hCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFBO1FBQ2hCLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFBO0lBQ2hCLENBQUM7SUFFRCxJQUFJLENBQUMsT0FBaUM7UUFDbEMsTUFBTSxFQUFDLEtBQUssRUFBRSxLQUFLLEVBQUMsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUE7UUFFbkQsSUFBSSxDQUFDLElBQUk7YUFDSixNQUFNLENBQUMsQ0FBQyxHQUFZLEVBQUUsUUFBZ0IsRUFBRSxFQUFFO1lBQ3ZDLE9BQU8sUUFBUSxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksUUFBUSxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDbkYsQ0FBQyxDQUFDO2FBQ0QsR0FBRyxDQUFDLENBQUMsR0FBaUIsRUFBRSxRQUFnQixFQUFFLEVBQUU7WUFDekMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUE7WUFDdkMsT0FBTyxHQUFHO2lCQUNMLE1BQU0sQ0FBQyxDQUFD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